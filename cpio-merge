#!/bin/bash

NAME=cpio-merge

function help()
{
    echo -e "\`$NAME' merges cpio archives\n"                        \
	    "\n"                                                     \
	    "Usage: $NAME -l CPIO1 -r CPIO2 -o CPIO3\n"              \
	    " -?, --help        Show this help statement\n"          \
	    "     --version     Show version statement\n"            \
	    " -l, --left CPIO1  First unpack CPIO1\n"                \
	    " -r, --right CPIO2 Then unpack CPIO2 on top\n"          \
	    " -o, --out CPIO3   Create CPIO3 as result of merge\n"   \
	    "\n"                                                     \
	    "Examples: $NAME -l foo.cpio -r bar.cpio -o baz.cpio\n";
}

function work()
{
    local cpio1=$1;
    local cpio2=$2;
    local cpio3=$3;

    dir=$(mktemp -d nbic.XXXXXX);

    test -d $dir &&
    cpio-unpack -f $cpio1 -d $dir &&
    cpio-unpack -f $cpio2 -d $dir &&
    cpio-pack -d $dir -o $cpio3 &&
    sudo rm -r $dir &&
    sudo chown $USER $cpio3 ||
    return 1;

    return 0;
}

function main()
{
    local dir; 
    local cpio1;
    local cpio2;
    local cpio3;

    while [ $# -gt 0 ]; do
        case $1 in
        -\? | --help)
            help; return 1;
            ;;
        --version)
            nbic --version; return 1;
            ;;
        -l | --left)
            shift; cpio1=$1; shift;
            ;;
        -r | --right)
            shift; cpio2=$1; shift;
            ;;
        -o | --out)
            shift; cpio3=$1; shift;
            ;;
        *)
	    echo "$NAME: bad argument: $1"; return 1;
            ;;
        esac
    done
   
    [ -f "$cpio1" -a -f "$cpio2" -a -n "$cpio3" ] || { 
    	help;
	return 1;
    }

    work $cpio1 $cpio2 $cpio3 || { 
    	echo "$NAME: bailing out because of errors";
	return 1;
    }

    return 0;
}

main "$@";
exit $?;
